Written Questions

Q1. Run the web crawler using the configurations located at src/main/config/written_question_1a.json and
    src/main/config/written_question_1b.json. The only difference between these configurations is that one always uses
    the sequential crawler and the other always uses the parallel crawler. Inspect the profile output in
    profileData.txt.

    If you are using a multi-processor computer, you should notice that SequentialWebCrawler#crawl and
    ParallelWebCrawler#crawl took about the same amount of time, but PageParserImpl#parse took much longer when run with
    the ParallelWebCrawler.

    Why did the parser take more time when run with ParallelWebCrawler?

  A:The profiler measured the total time spent in the parse() method across all threads.
    When run with the ParallelWebCrawler, the parse() method ran more times,
    so profileData.txt shows the total parse() time to be greater.

Q2. Your manager ran your crawler on her old personal computer, using the configurations from Q1, and she notices that
    the sequential crawler actually outperforms the parallel crawler. She would like to know why.

    (a) Suggest one reason why the sequential web crawler was able to read more web pages than the parallel crawler.
        (Hint: Try setting "parallelism" to 1 in the JSON configs to simulate your manager's computer.)

    A:  My manager's computer only has one processor, which means the parallel web crawler is actually less efficient.
        When running on a single thread, synchronized data structures are slower than non-synchronized data structures.

    (b) Suggest one scenario in which the parallel web crawler will almost certainly perform better than the sequential
        crawler. Why will it perform better?

    A:  My manager's computer  has a multi-processor computer.

Q3. Analyze your method profiler through the lens of Aspect Oriented Programming, by answering the following questions:

    (a) What cross-cutting concern is being addressed by the com.udacity.webcrawler.profiler.Profiler class?
   A:  Performance

    (b) What are the join points of the Profiler in the web crawler program?

   A: The profiling code was attached to intercepted method calls, or invocations,
    such as the parse() method that parsed web pages.



Q4. Identify three (3) different design patterns used in this project, and explain which interfaces, classes, and/or
    libraries use or implement those design patterns.

    For each pattern, name one thing about the pattern that you LIKED, and one thing you DISLIKED. If you did not like
    anything, you can name two things you disliked.

A:

1. Factory Pattern
   PageParserFactory uses this design pattern.

LIKED:Factory Method Pattern allows the sub-classes to choose the type of objects to create.
It promotes the loose-coupling by eliminating the need to bind application-specific classes into the code.

DISLIKED: One disadvantage of the Factory Method pattern is that it can expand the total number of classes in a system.
Every concrete Product class also requires a concrete Creator class. The parameterized Factory Method avoids this downside.

2 .Dependency Injection
Guice implements this design pattern.

LIKED: Making isolation in unit testing possible/easy
       Explicitly defining dependencies of a class

DISLIKE:Increased number of classes
        Creation of unnecessary interfaces

3. Builder Pattern
CrawlerConfiguration.Builder, CrawlResult.Builder, and JsonObjectBuilder are examples of this design pattern.

LIKED: The construction code is separated from the presentation code. Since the builder hides how the product is assembled, if you need to change the internal representation of a product, you only need to define a specific builder.

DISLIKED: If the internal changes of the product are complex, it will increase the difficulty and operating costs of the system